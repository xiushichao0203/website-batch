package com.website.batch.entity;

import java.util.ArrayList;
import java.util.List;

public class NetEaseSongListExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table SONG_LIST
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table SONG_LIST
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table SONG_LIST
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_LIST
     *
     * @mbg.generated
     */
    public NetEaseSongListExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_LIST
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_LIST
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_LIST
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_LIST
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_LIST
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_LIST
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_LIST
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_LIST
     *
     * @mbg.generated
     */
    public NetEaseSongListExample orderBy(String orderByClause) {
        this.setOrderByClause(orderByClause);
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_LIST
     *
     * @mbg.generated
     */
    public NetEaseSongListExample orderBy(String ... orderByClauses) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < orderByClauses.length; i++) {
            sb.append(orderByClauses[i]);
            if (i < orderByClauses.length - 1) {
                sb.append(" , ");
            }
        }
        this.setOrderByClause(sb.toString());
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_LIST
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_LIST
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria(this);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_LIST
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_LIST
     *
     * @mbg.generated
     */
    public static Criteria newAndCreateCriteria() {
        NetEaseSongListExample example = new NetEaseSongListExample();
        return example.createCriteria();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_LIST
     *
     * @mbg.generated
     */
    public NetEaseSongListExample when(boolean condition, IExampleWhen then) {
        if (condition) {
            then.example(this);
        }
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_LIST
     *
     * @mbg.generated
     */
    public NetEaseSongListExample when(boolean condition, IExampleWhen then, IExampleWhen otherwise) {
        if (condition) {
            then.example(this);
        } else {
            otherwise.example(this);
        }
        return this;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table SONG_LIST
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdIsNull() {
            addCriterion("ID is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("ID is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(String value) {
            addCriterion("ID =", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andIdEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("ID = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(String value) {
            addCriterion("ID <>", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andIdNotEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("ID <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(String value) {
            addCriterion("ID >", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andIdGreaterThanColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("ID > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(String value) {
            addCriterion("ID >=", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andIdGreaterThanOrEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("ID >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdLessThan(String value) {
            addCriterion("ID <", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andIdLessThanColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("ID < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(String value) {
            addCriterion("ID <=", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andIdLessThanOrEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("ID <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdLike(String value) {
            addCriterion("ID like", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotLike(String value) {
            addCriterion("ID not like", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<String> values) {
            addCriterion("ID in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<String> values) {
            addCriterion("ID not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(String value1, String value2) {
            addCriterion("ID between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(String value1, String value2) {
            addCriterion("ID not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andListIdIsNull() {
            addCriterion("LIST_ID is null");
            return (Criteria) this;
        }

        public Criteria andListIdIsNotNull() {
            addCriterion("LIST_ID is not null");
            return (Criteria) this;
        }

        public Criteria andListIdEqualTo(String value) {
            addCriterion("LIST_ID =", value, "listId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andListIdEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("LIST_ID = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andListIdNotEqualTo(String value) {
            addCriterion("LIST_ID <>", value, "listId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andListIdNotEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("LIST_ID <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andListIdGreaterThan(String value) {
            addCriterion("LIST_ID >", value, "listId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andListIdGreaterThanColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("LIST_ID > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andListIdGreaterThanOrEqualTo(String value) {
            addCriterion("LIST_ID >=", value, "listId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andListIdGreaterThanOrEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("LIST_ID >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andListIdLessThan(String value) {
            addCriterion("LIST_ID <", value, "listId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andListIdLessThanColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("LIST_ID < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andListIdLessThanOrEqualTo(String value) {
            addCriterion("LIST_ID <=", value, "listId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andListIdLessThanOrEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("LIST_ID <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andListIdLike(String value) {
            addCriterion("LIST_ID like", value, "listId");
            return (Criteria) this;
        }

        public Criteria andListIdNotLike(String value) {
            addCriterion("LIST_ID not like", value, "listId");
            return (Criteria) this;
        }

        public Criteria andListIdIn(List<String> values) {
            addCriterion("LIST_ID in", values, "listId");
            return (Criteria) this;
        }

        public Criteria andListIdNotIn(List<String> values) {
            addCriterion("LIST_ID not in", values, "listId");
            return (Criteria) this;
        }

        public Criteria andListIdBetween(String value1, String value2) {
            addCriterion("LIST_ID between", value1, value2, "listId");
            return (Criteria) this;
        }

        public Criteria andListIdNotBetween(String value1, String value2) {
            addCriterion("LIST_ID not between", value1, value2, "listId");
            return (Criteria) this;
        }

        public Criteria andListNameIsNull() {
            addCriterion("LIST_NAME is null");
            return (Criteria) this;
        }

        public Criteria andListNameIsNotNull() {
            addCriterion("LIST_NAME is not null");
            return (Criteria) this;
        }

        public Criteria andListNameEqualTo(String value) {
            addCriterion("LIST_NAME =", value, "listName");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andListNameEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("LIST_NAME = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andListNameNotEqualTo(String value) {
            addCriterion("LIST_NAME <>", value, "listName");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andListNameNotEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("LIST_NAME <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andListNameGreaterThan(String value) {
            addCriterion("LIST_NAME >", value, "listName");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andListNameGreaterThanColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("LIST_NAME > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andListNameGreaterThanOrEqualTo(String value) {
            addCriterion("LIST_NAME >=", value, "listName");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andListNameGreaterThanOrEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("LIST_NAME >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andListNameLessThan(String value) {
            addCriterion("LIST_NAME <", value, "listName");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andListNameLessThanColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("LIST_NAME < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andListNameLessThanOrEqualTo(String value) {
            addCriterion("LIST_NAME <=", value, "listName");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andListNameLessThanOrEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("LIST_NAME <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andListNameLike(String value) {
            addCriterion("LIST_NAME like", value, "listName");
            return (Criteria) this;
        }

        public Criteria andListNameNotLike(String value) {
            addCriterion("LIST_NAME not like", value, "listName");
            return (Criteria) this;
        }

        public Criteria andListNameIn(List<String> values) {
            addCriterion("LIST_NAME in", values, "listName");
            return (Criteria) this;
        }

        public Criteria andListNameNotIn(List<String> values) {
            addCriterion("LIST_NAME not in", values, "listName");
            return (Criteria) this;
        }

        public Criteria andListNameBetween(String value1, String value2) {
            addCriterion("LIST_NAME between", value1, value2, "listName");
            return (Criteria) this;
        }

        public Criteria andListNameNotBetween(String value1, String value2) {
            addCriterion("LIST_NAME not between", value1, value2, "listName");
            return (Criteria) this;
        }

        public Criteria andLsitDescIsNull() {
            addCriterion("LSIT_DESC is null");
            return (Criteria) this;
        }

        public Criteria andLsitDescIsNotNull() {
            addCriterion("LSIT_DESC is not null");
            return (Criteria) this;
        }

        public Criteria andLsitDescEqualTo(String value) {
            addCriterion("LSIT_DESC =", value, "lsitDesc");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andLsitDescEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("LSIT_DESC = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLsitDescNotEqualTo(String value) {
            addCriterion("LSIT_DESC <>", value, "lsitDesc");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andLsitDescNotEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("LSIT_DESC <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLsitDescGreaterThan(String value) {
            addCriterion("LSIT_DESC >", value, "lsitDesc");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andLsitDescGreaterThanColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("LSIT_DESC > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLsitDescGreaterThanOrEqualTo(String value) {
            addCriterion("LSIT_DESC >=", value, "lsitDesc");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andLsitDescGreaterThanOrEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("LSIT_DESC >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLsitDescLessThan(String value) {
            addCriterion("LSIT_DESC <", value, "lsitDesc");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andLsitDescLessThanColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("LSIT_DESC < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLsitDescLessThanOrEqualTo(String value) {
            addCriterion("LSIT_DESC <=", value, "lsitDesc");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andLsitDescLessThanOrEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("LSIT_DESC <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andLsitDescLike(String value) {
            addCriterion("LSIT_DESC like", value, "lsitDesc");
            return (Criteria) this;
        }

        public Criteria andLsitDescNotLike(String value) {
            addCriterion("LSIT_DESC not like", value, "lsitDesc");
            return (Criteria) this;
        }

        public Criteria andLsitDescIn(List<String> values) {
            addCriterion("LSIT_DESC in", values, "lsitDesc");
            return (Criteria) this;
        }

        public Criteria andLsitDescNotIn(List<String> values) {
            addCriterion("LSIT_DESC not in", values, "lsitDesc");
            return (Criteria) this;
        }

        public Criteria andLsitDescBetween(String value1, String value2) {
            addCriterion("LSIT_DESC between", value1, value2, "lsitDesc");
            return (Criteria) this;
        }

        public Criteria andLsitDescNotBetween(String value1, String value2) {
            addCriterion("LSIT_DESC not between", value1, value2, "lsitDesc");
            return (Criteria) this;
        }

        public Criteria andCreateUserIsNull() {
            addCriterion("CREATE_USER is null");
            return (Criteria) this;
        }

        public Criteria andCreateUserIsNotNull() {
            addCriterion("CREATE_USER is not null");
            return (Criteria) this;
        }

        public Criteria andCreateUserEqualTo(String value) {
            addCriterion("CREATE_USER =", value, "createUser");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andCreateUserEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("CREATE_USER = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateUserNotEqualTo(String value) {
            addCriterion("CREATE_USER <>", value, "createUser");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andCreateUserNotEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("CREATE_USER <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateUserGreaterThan(String value) {
            addCriterion("CREATE_USER >", value, "createUser");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andCreateUserGreaterThanColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("CREATE_USER > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateUserGreaterThanOrEqualTo(String value) {
            addCriterion("CREATE_USER >=", value, "createUser");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andCreateUserGreaterThanOrEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("CREATE_USER >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateUserLessThan(String value) {
            addCriterion("CREATE_USER <", value, "createUser");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andCreateUserLessThanColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("CREATE_USER < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateUserLessThanOrEqualTo(String value) {
            addCriterion("CREATE_USER <=", value, "createUser");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andCreateUserLessThanOrEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("CREATE_USER <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateUserLike(String value) {
            addCriterion("CREATE_USER like", value, "createUser");
            return (Criteria) this;
        }

        public Criteria andCreateUserNotLike(String value) {
            addCriterion("CREATE_USER not like", value, "createUser");
            return (Criteria) this;
        }

        public Criteria andCreateUserIn(List<String> values) {
            addCriterion("CREATE_USER in", values, "createUser");
            return (Criteria) this;
        }

        public Criteria andCreateUserNotIn(List<String> values) {
            addCriterion("CREATE_USER not in", values, "createUser");
            return (Criteria) this;
        }

        public Criteria andCreateUserBetween(String value1, String value2) {
            addCriterion("CREATE_USER between", value1, value2, "createUser");
            return (Criteria) this;
        }

        public Criteria andCreateUserNotBetween(String value1, String value2) {
            addCriterion("CREATE_USER not between", value1, value2, "createUser");
            return (Criteria) this;
        }

        public Criteria andCreateUserIdIsNull() {
            addCriterion("CREATE_USER_ID is null");
            return (Criteria) this;
        }

        public Criteria andCreateUserIdIsNotNull() {
            addCriterion("CREATE_USER_ID is not null");
            return (Criteria) this;
        }

        public Criteria andCreateUserIdEqualTo(String value) {
            addCriterion("CREATE_USER_ID =", value, "createUserId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andCreateUserIdEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("CREATE_USER_ID = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateUserIdNotEqualTo(String value) {
            addCriterion("CREATE_USER_ID <>", value, "createUserId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andCreateUserIdNotEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("CREATE_USER_ID <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateUserIdGreaterThan(String value) {
            addCriterion("CREATE_USER_ID >", value, "createUserId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andCreateUserIdGreaterThanColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("CREATE_USER_ID > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateUserIdGreaterThanOrEqualTo(String value) {
            addCriterion("CREATE_USER_ID >=", value, "createUserId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andCreateUserIdGreaterThanOrEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("CREATE_USER_ID >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateUserIdLessThan(String value) {
            addCriterion("CREATE_USER_ID <", value, "createUserId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andCreateUserIdLessThanColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("CREATE_USER_ID < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateUserIdLessThanOrEqualTo(String value) {
            addCriterion("CREATE_USER_ID <=", value, "createUserId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andCreateUserIdLessThanOrEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("CREATE_USER_ID <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateUserIdLike(String value) {
            addCriterion("CREATE_USER_ID like", value, "createUserId");
            return (Criteria) this;
        }

        public Criteria andCreateUserIdNotLike(String value) {
            addCriterion("CREATE_USER_ID not like", value, "createUserId");
            return (Criteria) this;
        }

        public Criteria andCreateUserIdIn(List<String> values) {
            addCriterion("CREATE_USER_ID in", values, "createUserId");
            return (Criteria) this;
        }

        public Criteria andCreateUserIdNotIn(List<String> values) {
            addCriterion("CREATE_USER_ID not in", values, "createUserId");
            return (Criteria) this;
        }

        public Criteria andCreateUserIdBetween(String value1, String value2) {
            addCriterion("CREATE_USER_ID between", value1, value2, "createUserId");
            return (Criteria) this;
        }

        public Criteria andCreateUserIdNotBetween(String value1, String value2) {
            addCriterion("CREATE_USER_ID not between", value1, value2, "createUserId");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIsNull() {
            addCriterion("CREATE_TIME is null");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIsNotNull() {
            addCriterion("CREATE_TIME is not null");
            return (Criteria) this;
        }

        public Criteria andCreateTimeEqualTo(String value) {
            addCriterion("CREATE_TIME =", value, "createTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andCreateTimeEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("CREATE_TIME = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotEqualTo(String value) {
            addCriterion("CREATE_TIME <>", value, "createTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andCreateTimeNotEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("CREATE_TIME <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThan(String value) {
            addCriterion("CREATE_TIME >", value, "createTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andCreateTimeGreaterThanColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("CREATE_TIME > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThanOrEqualTo(String value) {
            addCriterion("CREATE_TIME >=", value, "createTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andCreateTimeGreaterThanOrEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("CREATE_TIME >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThan(String value) {
            addCriterion("CREATE_TIME <", value, "createTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andCreateTimeLessThanColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("CREATE_TIME < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThanOrEqualTo(String value) {
            addCriterion("CREATE_TIME <=", value, "createTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andCreateTimeLessThanOrEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("CREATE_TIME <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeLike(String value) {
            addCriterion("CREATE_TIME like", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotLike(String value) {
            addCriterion("CREATE_TIME not like", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIn(List<String> values) {
            addCriterion("CREATE_TIME in", values, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotIn(List<String> values) {
            addCriterion("CREATE_TIME not in", values, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeBetween(String value1, String value2) {
            addCriterion("CREATE_TIME between", value1, value2, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotBetween(String value1, String value2) {
            addCriterion("CREATE_TIME not between", value1, value2, "createTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeIsNull() {
            addCriterion("UPDATE_TIME is null");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeIsNotNull() {
            addCriterion("UPDATE_TIME is not null");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeEqualTo(String value) {
            addCriterion("UPDATE_TIME =", value, "updateTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andUpdateTimeEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("UPDATE_TIME = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotEqualTo(String value) {
            addCriterion("UPDATE_TIME <>", value, "updateTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andUpdateTimeNotEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("UPDATE_TIME <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeGreaterThan(String value) {
            addCriterion("UPDATE_TIME >", value, "updateTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andUpdateTimeGreaterThanColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("UPDATE_TIME > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeGreaterThanOrEqualTo(String value) {
            addCriterion("UPDATE_TIME >=", value, "updateTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andUpdateTimeGreaterThanOrEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("UPDATE_TIME >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLessThan(String value) {
            addCriterion("UPDATE_TIME <", value, "updateTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andUpdateTimeLessThanColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("UPDATE_TIME < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLessThanOrEqualTo(String value) {
            addCriterion("UPDATE_TIME <=", value, "updateTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria andUpdateTimeLessThanOrEqualToColumn(NetEaseSongList.Column column) {
            addCriterion(new StringBuilder("UPDATE_TIME <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLike(String value) {
            addCriterion("UPDATE_TIME like", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotLike(String value) {
            addCriterion("UPDATE_TIME not like", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeIn(List<String> values) {
            addCriterion("UPDATE_TIME in", values, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotIn(List<String> values) {
            addCriterion("UPDATE_TIME not in", values, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeBetween(String value1, String value2) {
            addCriterion("UPDATE_TIME between", value1, value2, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotBetween(String value1, String value2) {
            addCriterion("UPDATE_TIME not between", value1, value2, "updateTime");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table SONG_LIST
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {
        /**
         * This field was generated by MyBatis Generator.
         * This field corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        private NetEaseSongListExample example;

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        protected Criteria(NetEaseSongListExample example) {
            super();
            this.example = example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public NetEaseSongListExample example() {
            return this.example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        @Deprecated
        public Criteria andIf(boolean ifAdd, ICriteriaAdd add) {
            if (ifAdd) {
                add.add(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then) {
            if (condition) {
                then.criteria(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then, ICriteriaWhen otherwise) {
            if (condition) {
                then.criteria(this);
            } else {
                otherwise.criteria(this);
            }
            return this;
        }

        @Deprecated
        public interface ICriteriaAdd {
            /**
             * This method was generated by MyBatis Generator.
             * This method corresponds to the database table SONG_LIST
             *
             * @mbg.generated
             */
            Criteria add(Criteria add);
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table SONG_LIST
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }

    public interface ICriteriaWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        void criteria(Criteria criteria);
    }

    public interface IExampleWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_LIST
         *
         * @mbg.generated
         */
        void example(NetEaseSongListExample example);
    }
}