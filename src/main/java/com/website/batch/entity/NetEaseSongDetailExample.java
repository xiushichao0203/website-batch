package com.website.batch.entity;

import java.util.ArrayList;
import java.util.List;

public class NetEaseSongDetailExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table SONG_DETAIL
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table SONG_DETAIL
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table SONG_DETAIL
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_DETAIL
     *
     * @mbg.generated
     */
    public NetEaseSongDetailExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_DETAIL
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_DETAIL
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_DETAIL
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_DETAIL
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_DETAIL
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_DETAIL
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_DETAIL
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_DETAIL
     *
     * @mbg.generated
     */
    public NetEaseSongDetailExample orderBy(String orderByClause) {
        this.setOrderByClause(orderByClause);
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_DETAIL
     *
     * @mbg.generated
     */
    public NetEaseSongDetailExample orderBy(String ... orderByClauses) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < orderByClauses.length; i++) {
            sb.append(orderByClauses[i]);
            if (i < orderByClauses.length - 1) {
                sb.append(" , ");
            }
        }
        this.setOrderByClause(sb.toString());
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_DETAIL
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_DETAIL
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria(this);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_DETAIL
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_DETAIL
     *
     * @mbg.generated
     */
    public static Criteria newAndCreateCriteria() {
        NetEaseSongDetailExample example = new NetEaseSongDetailExample();
        return example.createCriteria();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_DETAIL
     *
     * @mbg.generated
     */
    public NetEaseSongDetailExample when(boolean condition, IExampleWhen then) {
        if (condition) {
            then.example(this);
        }
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table SONG_DETAIL
     *
     * @mbg.generated
     */
    public NetEaseSongDetailExample when(boolean condition, IExampleWhen then, IExampleWhen otherwise) {
        if (condition) {
            then.example(this);
        } else {
            otherwise.example(this);
        }
        return this;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table SONG_DETAIL
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdIsNull() {
            addCriterion("ID is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("ID is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(String value) {
            addCriterion("ID =", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andIdEqualToColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("ID = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(String value) {
            addCriterion("ID <>", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andIdNotEqualToColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("ID <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(String value) {
            addCriterion("ID >", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andIdGreaterThanColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("ID > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(String value) {
            addCriterion("ID >=", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andIdGreaterThanOrEqualToColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("ID >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdLessThan(String value) {
            addCriterion("ID <", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andIdLessThanColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("ID < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(String value) {
            addCriterion("ID <=", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andIdLessThanOrEqualToColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("ID <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdLike(String value) {
            addCriterion("ID like", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotLike(String value) {
            addCriterion("ID not like", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<String> values) {
            addCriterion("ID in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<String> values) {
            addCriterion("ID not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(String value1, String value2) {
            addCriterion("ID between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(String value1, String value2) {
            addCriterion("ID not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andSongIdIsNull() {
            addCriterion("SONG_ID is null");
            return (Criteria) this;
        }

        public Criteria andSongIdIsNotNull() {
            addCriterion("SONG_ID is not null");
            return (Criteria) this;
        }

        public Criteria andSongIdEqualTo(String value) {
            addCriterion("SONG_ID =", value, "songId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andSongIdEqualToColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("SONG_ID = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSongIdNotEqualTo(String value) {
            addCriterion("SONG_ID <>", value, "songId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andSongIdNotEqualToColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("SONG_ID <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSongIdGreaterThan(String value) {
            addCriterion("SONG_ID >", value, "songId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andSongIdGreaterThanColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("SONG_ID > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSongIdGreaterThanOrEqualTo(String value) {
            addCriterion("SONG_ID >=", value, "songId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andSongIdGreaterThanOrEqualToColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("SONG_ID >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSongIdLessThan(String value) {
            addCriterion("SONG_ID <", value, "songId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andSongIdLessThanColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("SONG_ID < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSongIdLessThanOrEqualTo(String value) {
            addCriterion("SONG_ID <=", value, "songId");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andSongIdLessThanOrEqualToColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("SONG_ID <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSongIdLike(String value) {
            addCriterion("SONG_ID like", value, "songId");
            return (Criteria) this;
        }

        public Criteria andSongIdNotLike(String value) {
            addCriterion("SONG_ID not like", value, "songId");
            return (Criteria) this;
        }

        public Criteria andSongIdIn(List<String> values) {
            addCriterion("SONG_ID in", values, "songId");
            return (Criteria) this;
        }

        public Criteria andSongIdNotIn(List<String> values) {
            addCriterion("SONG_ID not in", values, "songId");
            return (Criteria) this;
        }

        public Criteria andSongIdBetween(String value1, String value2) {
            addCriterion("SONG_ID between", value1, value2, "songId");
            return (Criteria) this;
        }

        public Criteria andSongIdNotBetween(String value1, String value2) {
            addCriterion("SONG_ID not between", value1, value2, "songId");
            return (Criteria) this;
        }

        public Criteria andSongNameIsNull() {
            addCriterion("SONG_NAME is null");
            return (Criteria) this;
        }

        public Criteria andSongNameIsNotNull() {
            addCriterion("SONG_NAME is not null");
            return (Criteria) this;
        }

        public Criteria andSongNameEqualTo(String value) {
            addCriterion("SONG_NAME =", value, "songName");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andSongNameEqualToColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("SONG_NAME = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSongNameNotEqualTo(String value) {
            addCriterion("SONG_NAME <>", value, "songName");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andSongNameNotEqualToColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("SONG_NAME <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSongNameGreaterThan(String value) {
            addCriterion("SONG_NAME >", value, "songName");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andSongNameGreaterThanColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("SONG_NAME > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSongNameGreaterThanOrEqualTo(String value) {
            addCriterion("SONG_NAME >=", value, "songName");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andSongNameGreaterThanOrEqualToColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("SONG_NAME >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSongNameLessThan(String value) {
            addCriterion("SONG_NAME <", value, "songName");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andSongNameLessThanColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("SONG_NAME < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSongNameLessThanOrEqualTo(String value) {
            addCriterion("SONG_NAME <=", value, "songName");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andSongNameLessThanOrEqualToColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("SONG_NAME <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSongNameLike(String value) {
            addCriterion("SONG_NAME like", value, "songName");
            return (Criteria) this;
        }

        public Criteria andSongNameNotLike(String value) {
            addCriterion("SONG_NAME not like", value, "songName");
            return (Criteria) this;
        }

        public Criteria andSongNameIn(List<String> values) {
            addCriterion("SONG_NAME in", values, "songName");
            return (Criteria) this;
        }

        public Criteria andSongNameNotIn(List<String> values) {
            addCriterion("SONG_NAME not in", values, "songName");
            return (Criteria) this;
        }

        public Criteria andSongNameBetween(String value1, String value2) {
            addCriterion("SONG_NAME between", value1, value2, "songName");
            return (Criteria) this;
        }

        public Criteria andSongNameNotBetween(String value1, String value2) {
            addCriterion("SONG_NAME not between", value1, value2, "songName");
            return (Criteria) this;
        }

        public Criteria andSongSingerIsNull() {
            addCriterion("SONG_SINGER is null");
            return (Criteria) this;
        }

        public Criteria andSongSingerIsNotNull() {
            addCriterion("SONG_SINGER is not null");
            return (Criteria) this;
        }

        public Criteria andSongSingerEqualTo(String value) {
            addCriterion("SONG_SINGER =", value, "songSinger");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andSongSingerEqualToColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("SONG_SINGER = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSongSingerNotEqualTo(String value) {
            addCriterion("SONG_SINGER <>", value, "songSinger");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andSongSingerNotEqualToColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("SONG_SINGER <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSongSingerGreaterThan(String value) {
            addCriterion("SONG_SINGER >", value, "songSinger");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andSongSingerGreaterThanColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("SONG_SINGER > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSongSingerGreaterThanOrEqualTo(String value) {
            addCriterion("SONG_SINGER >=", value, "songSinger");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andSongSingerGreaterThanOrEqualToColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("SONG_SINGER >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSongSingerLessThan(String value) {
            addCriterion("SONG_SINGER <", value, "songSinger");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andSongSingerLessThanColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("SONG_SINGER < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSongSingerLessThanOrEqualTo(String value) {
            addCriterion("SONG_SINGER <=", value, "songSinger");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andSongSingerLessThanOrEqualToColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("SONG_SINGER <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andSongSingerLike(String value) {
            addCriterion("SONG_SINGER like", value, "songSinger");
            return (Criteria) this;
        }

        public Criteria andSongSingerNotLike(String value) {
            addCriterion("SONG_SINGER not like", value, "songSinger");
            return (Criteria) this;
        }

        public Criteria andSongSingerIn(List<String> values) {
            addCriterion("SONG_SINGER in", values, "songSinger");
            return (Criteria) this;
        }

        public Criteria andSongSingerNotIn(List<String> values) {
            addCriterion("SONG_SINGER not in", values, "songSinger");
            return (Criteria) this;
        }

        public Criteria andSongSingerBetween(String value1, String value2) {
            addCriterion("SONG_SINGER between", value1, value2, "songSinger");
            return (Criteria) this;
        }

        public Criteria andSongSingerNotBetween(String value1, String value2) {
            addCriterion("SONG_SINGER not between", value1, value2, "songSinger");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIsNull() {
            addCriterion("CREATE_TIME is null");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIsNotNull() {
            addCriterion("CREATE_TIME is not null");
            return (Criteria) this;
        }

        public Criteria andCreateTimeEqualTo(String value) {
            addCriterion("CREATE_TIME =", value, "createTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andCreateTimeEqualToColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("CREATE_TIME = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotEqualTo(String value) {
            addCriterion("CREATE_TIME <>", value, "createTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andCreateTimeNotEqualToColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("CREATE_TIME <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThan(String value) {
            addCriterion("CREATE_TIME >", value, "createTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andCreateTimeGreaterThanColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("CREATE_TIME > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThanOrEqualTo(String value) {
            addCriterion("CREATE_TIME >=", value, "createTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andCreateTimeGreaterThanOrEqualToColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("CREATE_TIME >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThan(String value) {
            addCriterion("CREATE_TIME <", value, "createTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andCreateTimeLessThanColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("CREATE_TIME < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThanOrEqualTo(String value) {
            addCriterion("CREATE_TIME <=", value, "createTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andCreateTimeLessThanOrEqualToColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("CREATE_TIME <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeLike(String value) {
            addCriterion("CREATE_TIME like", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotLike(String value) {
            addCriterion("CREATE_TIME not like", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIn(List<String> values) {
            addCriterion("CREATE_TIME in", values, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotIn(List<String> values) {
            addCriterion("CREATE_TIME not in", values, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeBetween(String value1, String value2) {
            addCriterion("CREATE_TIME between", value1, value2, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotBetween(String value1, String value2) {
            addCriterion("CREATE_TIME not between", value1, value2, "createTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeIsNull() {
            addCriterion("UPDATE_TIME is null");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeIsNotNull() {
            addCriterion("UPDATE_TIME is not null");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeEqualTo(String value) {
            addCriterion("UPDATE_TIME =", value, "updateTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andUpdateTimeEqualToColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("UPDATE_TIME = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotEqualTo(String value) {
            addCriterion("UPDATE_TIME <>", value, "updateTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andUpdateTimeNotEqualToColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("UPDATE_TIME <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeGreaterThan(String value) {
            addCriterion("UPDATE_TIME >", value, "updateTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andUpdateTimeGreaterThanColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("UPDATE_TIME > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeGreaterThanOrEqualTo(String value) {
            addCriterion("UPDATE_TIME >=", value, "updateTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andUpdateTimeGreaterThanOrEqualToColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("UPDATE_TIME >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLessThan(String value) {
            addCriterion("UPDATE_TIME <", value, "updateTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andUpdateTimeLessThanColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("UPDATE_TIME < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLessThanOrEqualTo(String value) {
            addCriterion("UPDATE_TIME <=", value, "updateTime");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria andUpdateTimeLessThanOrEqualToColumn(NetEaseSongDetail.Column column) {
            addCriterion(new StringBuilder("UPDATE_TIME <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLike(String value) {
            addCriterion("UPDATE_TIME like", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotLike(String value) {
            addCriterion("UPDATE_TIME not like", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeIn(List<String> values) {
            addCriterion("UPDATE_TIME in", values, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotIn(List<String> values) {
            addCriterion("UPDATE_TIME not in", values, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeBetween(String value1, String value2) {
            addCriterion("UPDATE_TIME between", value1, value2, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotBetween(String value1, String value2) {
            addCriterion("UPDATE_TIME not between", value1, value2, "updateTime");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table SONG_DETAIL
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {
        /**
         * This field was generated by MyBatis Generator.
         * This field corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        private NetEaseSongDetailExample example;

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        protected Criteria(NetEaseSongDetailExample example) {
            super();
            this.example = example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public NetEaseSongDetailExample example() {
            return this.example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        @Deprecated
        public Criteria andIf(boolean ifAdd, ICriteriaAdd add) {
            if (ifAdd) {
                add.add(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then) {
            if (condition) {
                then.criteria(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then, ICriteriaWhen otherwise) {
            if (condition) {
                then.criteria(this);
            } else {
                otherwise.criteria(this);
            }
            return this;
        }

        @Deprecated
        public interface ICriteriaAdd {
            /**
             * This method was generated by MyBatis Generator.
             * This method corresponds to the database table SONG_DETAIL
             *
             * @mbg.generated
             */
            Criteria add(Criteria add);
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table SONG_DETAIL
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }

    public interface ICriteriaWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        void criteria(Criteria criteria);
    }

    public interface IExampleWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table SONG_DETAIL
         *
         * @mbg.generated
         */
        void example(NetEaseSongDetailExample example);
    }
}